You are an expert full-stack engineer. Generate a complete project (frontend + backend) for a web app that visualizes and tracks a compounding wager plan like this table: columns Day, Wager, Odds, Winnings, Check (✅/❌). The app should let a user configure start amount, odds, duration, then auto-generate the plan. The user can mark each day as won/lost, and the plan recalculates accordingly.

############################
## 1) OVERALL GOAL
############################
Build a production-ready web app called **Money Marathon** with:
- **Frontend**: React 18 + Vite + TypeScript, TailwindCSS, Radix UI for components, React Query for server state, React Hook Form + Zod for validation.
- **Backend**: Node.js + Express.js + TypeScript, MVC architecture with SOLID principles, Drizzle ORM with PostgreSQL, Passport.js with Express-Session for authentication.

############################
## 2) ARCHITECTURE & PRINCIPLES
############################
- **Frontend**: feature-based folders, React Query for data fetching, forms with React Hook Form + Zod, state persisted in React Query + Session.
- **Backend**: MVC with SOLID principles:
  - Controllers: thin, only HTTP orchestration.
  - Services: business logic, injected dependencies.
  - Repositories: DB access via Drizzle ORM.
  - Entities: pure TS types.
- **SOLID**:
  - SRP: each service/module only one reason to change.
  - OCP: support multiple calculation strategies without changing existing logic.
  - DIP: services depend on interfaces, not concrete Drizzle repo.

############################
## 3) TECH STACK
############################
Frontend: React 18, Vite, TypeScript, Tailwind CSS, Radix UI, React Query, React Hook Form, Zod, Axios.
Backend: Node.js, Express.js, TypeScript, Drizzle ORM, PostgreSQL, Passport.js (local strategy), Express-Session, Zod, Winston logger.
Dev: ESLint, Prettier, Jest + React Testing Library (frontend), Jest + Supertest (backend).

############################
## 4) DOMAIN & RULES
############################
Entities:
- User { id, name, email, passwordHash, createdAt }
- Plan { id, userId, startWager: number, odds: number, days: number, status: "active"|"stopped"|"completed", createdAt }
- DayEntry { id, planId, day: number, wager: number, odds: number, winnings: number, result: "pending"|"win"|"loss" }

Rules:
- winnings = wager * odds
- If result=win → next wager = winnings
- If result=loss → plan stops (status=stopped)
- Restart from day X = regenerate rows forward
- Edits (odds, wager) trigger regeneration

############################
## 5) API DESIGN
############################
Auth:
- POST /api/auth/register {name,email,password}
- POST /api/auth/login {email,password}
- GET /api/auth/logout
- GET /api/auth/user -> current user

Plans:
- POST /api/plans {startWager, odds, days} -> creates plan with entries
- GET /api/plans -> all user plans
- GET /api/plans/:id -> single plan
- PATCH /api/plans/:id -> edit plan
- DELETE /api/plans/:id

DayEntries:
- PATCH /api/plans/:id/days/:day { result: "win"|"loss" }
- POST /api/plans/:id/restart { day: number }

############################
## 6) BACKEND STRUCTURE
############################
/server
  /src
    /config (env, db.ts for Drizzle, session)
    /routes (auth.routes.ts, plan.routes.ts, day.routes.ts)
    /controllers (auth.controller.ts, plan.controller.ts)
    /services (auth.service.ts, plan.service.ts, day.service.ts)
    /repositories (IPlanRepository.ts, PlanDrizzleRepository.ts)
    /models (entities.ts, dtos.ts)
    /middlewares (isAuthenticated.ts, errorHandler.ts)
    /utils (hash.ts, money.ts)
    app.ts
    server.ts
  drizzle/
    schema.ts (User, Plan, DayEntry tables)
  jest.config.ts
  package.json

############################
## 7) FRONTEND SCREENS
############################
Screens:
1. Login/Register → Auth with sessions via Passport
2. Create Plan → Form (React Hook Form + Zod)
3. Plan Table → Shows (Day, Wager, Odds, Winnings, Check column)
   - ✅/❌ toggles
   - Edit odds/start
   - Restart plan
4. Dashboard → List of plans, status badges
5. Analytics → Graph (line chart using winnings/day)

############################
## 8) STATE MANAGEMENT
############################
- Auth state from backend session (React Query fetch `/auth/user`)
- Plans fetched via React Query
- Mutations for day results (optimistic updates)
- React Hook Form for plan creation/edit

############################
## 9) TESTING
############################
- Backend: Jest + Supertest for routes (auth, plan, day)
- Frontend: React Testing Library for components (PlanTable, CreatePlanForm)
- Unit tests for calculation services

############################
## 10) ACCEPTANCE CRITERIA
############################
- User can register/login with session auth
- Create a plan, view generated days
- Toggle ✅/❌ on days → recalculates correctly
- Restart plan from chosen day
- Dashboard shows multiple plans
- Works with PostgreSQL + Drizzle ORM migrations
- Clean MVC + SOLID code structure
